version: '3.9'
services:
  app:
    build: .
    container_name: nest-app
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_started
    # Não expõe porta no host; o Kong acessa pela rede interna (app:3000)
    environment:
      - NODE_ENV=development
      - PORT=3000
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432 # <- interno no cluster Docker
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=postgres
      - DATABASE_NAME=appdb
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=guest
      - RABBITMQ_PASSWORD=guest
      - RABBITMQ_EXCHANGE=app.exchange
      - RABBITMQ_ROUTING_KEY=app.route
      - RABBITMQ_QUEUE=app.queue
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_ACCESS_SECRET=supersecret
      - JWT_ACCESS_EXPIRES=15m
      - JWT_REFRESH_SECRET=refresh-secret
      - JWT_REFRESH_EXPIRES=7d
    command: ['node', 'dist/main.js']

  postgres:
    image: postgres:16-alpine
    container_name: postgres
    ports:
      - '5435:5432' # <- host:container
    environment:
      - POSTGRES_DB=appdb
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres -d appdb']
      interval: 5s
      timeout: 3s
      retries: 10

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    ports:
      - '5672:5672'
      - '15672:15672'
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    healthcheck:
      test: ['CMD', 'rabbitmq-diagnostics', 'ping']
      interval: 5s
      timeout: 3s
      retries: 10

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - '6379:6379'
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 5s
      timeout: 3s
      retries: 10

  kong:
    image: kong:3.6
    container_name: kong
    depends_on:
      app:
        condition: service_started
    environment:
      - KONG_DATABASE=off
      - KONG_DECLARATIVE_CONFIG=/etc/kong/kong.yml
      - KONG_PROXY_LISTEN=0.0.0.0:8000
      - KONG_ADMIN_LISTEN=0.0.0.0:8001
      - KONG_LOG_LEVEL=info
    volumes:
      - ./kong/kong.yml:/etc/kong/kong.yml:ro
    ports:
      - '8000:8000'
      - '8001:8001'

volumes:
  pgdata: {}

